This lesson assumes familiarity with a few common probability distributions, but these topics will only be discussed with respect to random number generation. Even if you have no prior experience with these concepts, you should be able to complete the lesson and understand the main ideas.

The first function we'll use to generate random numbers is sample(). Use ?sample to pull up the documentation.

> ?sample


Let's simulate rolling four six-sided dice: sample(1:6, 4, replace = TRUE).

> sample(1:6, 4, replace=TRUE)
[1] 4 2 2 1


Now repeat the command to see how your result differs. (The probability of rolling the exact same result is (1/6)^4 = 0.00077, which is pretty small!)

> sample(1:6, 4, replace=TRUE)
[1] 1 5 3 6

Now sample 10 numbers between 1 and 20, WITHOUT replacement. To sample without replacement, simply leave off the 'replace' argument.

>  sample(1:20, 10)
 [1] 12  9  2  4 18 19 15  7  1 13

LETTERS is a predefined variable in R containing a vector of all 26 letters of the English alphabet. Take a look at it now.

> sample(LETTERS)
 [1] "V" "L" "N" "G" "T" "P" "E" "K" "Y" "O" "C" "S" "Q" "M" "D" "J" "H" "W" "F" "U"
[21] "A" "R" "Z" "B" "I" "X"

This is identical to taking a sample of size 26 from LETTERS, without replacement. When the 'size' argument to sample() is not specified, R takes a sample equal in size to the vector from which you are sampling.


Now, suppose we want to simulate 100 flips of an unfair two-sided coin. This particular coin has a 0.3 probability of landing 'tails' and a 0.7 probability of landing 'heads'.


Let the value 0 represent tails and the value 1 represent heads. Use sample() to draw a sample of size 100 from the vector c(0,1), with replacement. Since the coin is unfair, we must attach specific probabilities to the values 0 (tails) and 1 (heads) with a fourth argument, prob = c(0.3, 0.7). Assign the result to a new variable called flips.

> flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))

View the contents of the flips variable.

> flips
  [1] 1 1 0 0 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 0 1 1 0 0 1 1 1 1 1 1 1 1 0 1 0 1 0 0 1 1 1
 [42] 1 1 1 1 1 1 1 1 1 0 1 0 0 0 1 1 1 1 1 1 0 0 0 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 0 0
 [83] 0 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 0

Since we set the probability of landing heads on any given flip to be 0.7, we'd expect approximately 70 of our coin flips to have the value 1. Count the actual number of 1s contained in flips using the sum() function.

> sum(flips)
[1] 70

A coin flip is a binary outcome (0 or 1) and we are performing 100 independent trials (coin flips), so we can use rbinom() to simulate a binomial random variable. Pull up the documentation for rbinom() using ?rbinom.

> ?rbinom

| Each probability distribution in R has an r*** function (for "random"), a d***
| function (for "density"), a p*** (for "probability"), and q*** (for "quantile"). We
| are most interested in the r*** functions in this lesson, but I encourage you to
| explore the others on your own.


| A binomial random variable represents the number of 'successes' (heads) in a given
| number of independent 'trials' (coin flips). Therefore, we can generate a single
| random variable that represents the number of heads in 100 flips of our unfair coin
| using rbinom(1, size = 100, prob = 0.7). Note that you only specify the probability
| of 'success' (heads) and NOT the probability of 'failure' (tails). Try it now.

> rbinom(1, size=100, prob=0.7)
[1] 66

| Equivalently, if we want to see all of the 0s and 1s, we can request 100
| observations, each of size 1, with success probability of 0.7. Give it a try,
| assigning the result to a new variable called flips2.

> flips2 <- rbinom(n=100, size=1, prob=0.7)

View the contents of flips2.

> flips2
  [1] 1 1 1 1 0 1 0 1 1 1 1 1 0 1 1 0 0 1 1 0 1 0 0 1 1 1 1 1 0 1 1 1 0 1 0 0 1 1 0 1 0
 [42] 0 0 1 0 1 0 1 0 0 1 1 1 1 1 1 1 0 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 0
 [83] 1 1 1 1 1 1 1 1 0 0 1 0 1 1 1 1 1 1

> sum(flips2)
[1] 69

| Similar to rbinom(), we can use R to simulate random numbers from many other
| probability distributions. Pull up the documentation for rnorm() now.

> ?rnorm

| The standard normal distribution has mean 0 and standard deviation 1. As you can see
| under the 'Usage' section in the documentation, the default values for the 'mean'
| and 'sd' arguments to rnorm() are 0 and 1, respectively. Thus, rnorm(10) will
| generate 10 random numbers from a standard normal distribution. Give it a try.

> rnorm(10)
 [1]  0.57913457  0.05312193  0.92380619  0.14522949 -0.88649435  0.37985772
 [7] -0.94199625 -0.48406717 -0.23334446  0.51127182

| Now do the same, except with a mean of 100 and a standard deviation of 25.

> rnorm(10, 100, 25)
 [1]  81.77614 143.79364  97.84904 127.65908  99.52055  62.66350 167.51592  81.40764
 [9] 126.62987  99.19796

| Finally, what if we want to simulate 100 *groups* of random numbers, each containing
| 5 values generated from a Poisson distribution with mean 10? Let's start with one
| group of 5 numbers, then I'll show you how to repeat the operation 100 times in a
| convenient and compact way.


| Generate 5 random values from a Poisson distribution with mean 10. Check out the
| documentation for rpois() if you need help.

> rpois(5, 10)
[1]  9 13  8 10  4

| Now use replicate(100, rpois(5, 10)) to perform this operation 100 times. Store the
| result in a new variable called my_pois.

> my_pois <- replicate(100,rpois(5,10))

| Take a look at the contents of my_pois.

> my_pois
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15]
[1,]   10   16   15    5   11   10   16   12   14     4    13    10    12    12     5
[2,]   18   11   13    6   11    9    9   12   10    20    18    14    14     7    15
[3,]   12   10   10    9    9    9    7   13   11     8     7     8    13     7     8
[4,]   11    8   15   13   11   10    7    8    7    12    12    11    10     9     3
[5,]    9    7   13   13    5    9   13   10    5     7     9    12     5     7     8
     [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27] [,28]
[1,]    13    10    16     6    10    15     6     7     6     8     9    10    13
[2,]     9    16    10     6     7     8    17    12    12    22     8     8     9
[3,]     8     5     9    16     7     7     9    11    10    12     5    11    10
[4,]     9    12    10     8    15    10     7     8     8     8    12     7     8
[5,]    10    11    11     4     9     7     8    14    12     4     7    11    11
     [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] [,39] [,40] [,41]
[1,]    10    16     8    15    11    13     4     6     7     5    10    10    12
[2,]    19     8     7    14    11    12    13    11     6     8    12     5     7
[3,]     8     8    10     3    11     9     5    11    12     7    10     5     8
[4,]    13     6    11    11     5     7     9     8    12    13     9    15     8
[5,]     7    18     3     7     7     6     8    14    10     9     9    10    12
     [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] [,51] [,52] [,53] [,54]
[1,]    13    11     8    11     9     8    14    10    15     7     6    12    11
[2,]    13     3    11    11    11     7    10    11    12    11    11    12     7
[3,]    12     6     6     9    13     6    12    10     9     9     9    11    12
[4,]    13     5    17    14     9    10     7     8    11     8     6     7     8
[5,]    10     8    13     8    12    14    11    11     9     9    13    10     7
     [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62] [,63] [,64] [,65] [,66] [,67]
[1,]    13     9    12    10    11    13    12     5    13     8     8     9     8
[2,]    11     9    11    16    13     5     9     6     9    11     9     8    12
[3,]     9     6     8     8    17     9    10    13     9     7     5    12    10
[4,]     6    11    12    10     4    12     7    10    12    11    15     8    15
[5,]    10     9     9    12    14     5    10    12    11     4    10    16     7
     [,68] [,69] [,70] [,71] [,72] [,73] [,74] [,75] [,76] [,77] [,78] [,79] [,80]
[1,]    12    12    10    11     4    14    11    12     9     9     9     8    15
[2,]    11    14    10     9     7    16    13    14    13    12    11    19    11
[3,]    11    11    12    10    14    14    11    13     7    10    14     8    12
[4,]    16     9    10    20     4    11     8     7    10    11    14     8    11
[5,]    13     8     7     8     6    13    10     8    12    13    10    13    14
     [,81] [,82] [,83] [,84] [,85] [,86] [,87] [,88] [,89] [,90] [,91] [,92] [,93]
[1,]     8    10     5     9     9    12     6     8     4     7    13    10    12
[2,]    10     8    10     6     9     9     9     6    11    13    14     6     8
[3,]     8     7    12    15    13    10     9     7     9     5    12    13    13
[4,]     7     8    15     5    10     8     7     6     8    15    14    11    10
[5,]    11     7    12    10    10    13     9    14     8    12    12     6    13
     [,94] [,95] [,96] [,97] [,98] [,99] [,100]
[1,]     8     8     7     8     8    11     22
[2,]     6    12    10     8    11    13      5
[3,]    10    11    13     9     7     8      8
[4,]    15    13     8     6    11     9     14
[5,]     5     9     6     5    16    12     10

| replicate() created a matrix, each column of which contains 5 random numbers
| generated from a Poisson distribution with mean 10. Now we can find the mean of each
| column in my_pois using the colMeans() function. Store the result in a variable
| called cm.

> cm <- colMeans(my_pois)

| And let's take a look at the distribution of our column means by plotting a
| histogram with hist(cm).

> hist(cm)

| Looks like our column means are almost normally distributed, right? That's the
| Central Limit Theorem at work, but that's a lesson for another day!


| All of the standard probability distributions are built into R, including
| exponential (rexp()), chi-squared (rchisq()), gamma (rgamma()), .... Well, you see
| the pattern.


| Simulation is practically a field of its own and we've only skimmed the surface of
| what's possible. I encourage you to explore these and other functions further on
| your own.
