In this lesson, you'll learn how to examine your local workspace in R and begin to explore the relationship between your workspace and the file system of your machine.

Determine which directory your R session is using as its current working directory using getwd().
> getwd()
[1] "C:/Users/rimi2/Documents"

List all the objects in your local workspace using ls().
> ls()
 [1] "b"           "data"        "galton"      "my_div"      "my_sqrt"    
 [6] "newdata"     "result.mean" "test"        "x"           "y"          
[11] "z"          

Some R commands are the same as their equivalents commands on Linux or on a Mac. Both Linux and Mac operating systems are based on an operating system called Unix. It's always a good idea to learn more about Unix!

Assign 9 to x using x <- 9.
> x <- 9

Now take a look at objects that are in your workspace using ls().
> ls()
 [1] "b"           "data"        "galton"      "my_div"      "my_sqrt"    
 [6] "newdata"     "result.mean" "test"        "x"           "y"          
[11] "z"          

List all the files in your working directory using list.files() or dir().
> dir()
 [1] "8 songs list.txt"                                                        
 [2] "abap.txt"                                                                

As we go through this lesson, you should be examining the help page for each new function. Check out the help page for list.files with the command ?list.files.
> ?list.files

One of the most helpful parts of any R help file is the See Also section. Read that section for list.files. Some of these functions may be used in later portions of this lesson.

Using the args() function on a function name is also a handy way to see what arguments a function can take.
> args(list.files)
function (path = ".", pattern = NULL, all.files = FALSE, full.names = FALSE, 
    recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, 
    no.. = FALSE) 
NULL

Assign the value of the current working directory to a variable called "old.dir".
> old.dir <- getwd()

We will use old.dir at the end of this lesson to move back to the place that we started. 
A lot of query functions like getwd() have the useful property that they return the answer to the question as a result of the function.

Use dir.create() to create a directory in the current working directory called "testdir".
> dir.create("testdir")

Set your working directory to "testdir" with the setwd() command.
> setwd("testdir")

Create a file in your working directory called "mytest.R" using the file.create() function.
> ?file.create
> file.create("mytest.R")
[1] TRUE

This should be the only file in this newly created directory. Let's check this by listing all the files in the current directory.
list.files() shows that the directory only contains mytest.R.
> list.files()
[1] "mytest.R"

Check to see if "mytest.R" exists in the working directory using the file.exists() function.
> file.exists("mytest.R")
[1] TRUE

These sorts of functions are excessive for interactive use. But, if you are running a program that loops through a series of files and does some processing on each one, you will want to check to see that each exists before you try to process it.
Access information about the file "mytest.R" by using file.info().

> file.info("mytest.R")
         size isdir mode               mtime               ctime               atime exe
mytest.R    0 FALSE  666 2018-10-12 02:55:53 2018-10-12 02:55:53 2018-10-12 02:55:53  no

You can use the $ operator --- e.g., file.info("mytest.R")$mode --- to grab specific items. Change the name of the file "mytest.R" to "mytest2.R" by using file.rename().
> ?file.rename()
> file.rename("mytest.R", "mytest2.R")
[1] TRUE

Make a copy of "mytest2.R" called "mytest3.R" using file.copy().
> ?file.copy()
> file.copy("mytest2.R", "mytest3.R")
[1] TRUE

You now have two files in the current directory. That may not seem very interesting. But what if you were working with dozens, or millions, of individual files? 
>In that case, being able to programatically act on many files would be absolutely necessary. *Don't forget that you can, temporarily, leave the lesson by typing play() and then return by typing nxt().*

Provide the relative path to the file "mytest3.R" by using file.path().
> ?file.path()
> file.path("mytest3.R")
[1] "mytest3.R"

You can use file.path to construct file and directory paths that are independent of the operating system your R code is running on. Pass 'folder1' and 'folder2' as arguments to file.path to make a platform-independent pathname.
> file.path("folder1", "folder2")
[1] "folder1/folder2"

Take a look at the documentation for dir.create by entering ?dir.create . Notice the 'recursive' argument. In order to create nested directories, 'recursive' must be set to TRUE.
> ?dir.create

Create a directory in the current working directory called "testdir2" and a subdirectory for it called "testdir3", all in one command by using dir.create() and file.path().
> dir.create( file.path("testdir2", "testdir3"), recursive = TRUE)

Go back to your original working directory using setwd(). 
(Recall that we created the variable old.dir with the full path for the original working directory at the start of these questions.)
> setwd(old.dir) <RIGHT>

It is often helpful to save the settings that you had before you began an analysis and then go back to them at the end. This trick is often used within functions; you save, say, the par() settings that you started with, mess around a bunch, and then set them back to the original values at the end. This isn't the same as what we have done here, but it seems similar enough to mention.

After you finish this lesson delete the 'testdir' directory that you just left (and everything in it)
