Practice Programming Assignment: Swirl Lesson 5: Missing Values


| Missing values play an important role in statistics and data analysis. Often, missing
| values must not be ignored, but rather they should be carefully studied to see if there's
| an underlying pattern or cause for their missingness.

...

  |====                                                                              |   5%
| In R, NA is used to represent any value that is 'not available' or 'missing' (in the
| statistical sense). In this lesson, we'll explore missing values further.

...

  |========                                                                          |  10%
| Any operation involving NA generally yields NA as the result. To illustrate, let's create
| a vector c(44, NA, 5, NA) and assign it to a variable x.

> 
> x <- c(44, NA, 5, NA)

| You got it!

  |============                                                                      |  15%
| Now, let's multiply x by 3.

> x * 3
[1] 132  NA  15  NA

| Excellent work!

  |================                                                                  |  20%
| Notice that the elements of the resulting vector that correspond with the NA values in x
| are also NA.

...

  |====================                                                              |  25%
| To make things a little more interesting, lets create a vector containing 1000 draws from
| a standard normal distribution with y <- rnorm(1000).

> y <- rnorm(1000)

| Your dedication is inspiring!

  |=========================                                                         |  30%
| Next, let's create a vector containing 1000 NAs with z <- rep(NA, 1000).

> z <- rep(NA, 1000)

| Excellent job!

  |=============================                                                     |  35%
| Finally, let's select 100 elements at random from these 2000 values (combining y and z)
| such that we don't know how many NAs we'll wind up with or what positions they'll occupy
| in our final vector -- my_data <- sample(c(y, z), 100).

> my_data <- sample(c(y, z), 100)

| All that hard work is paying off!

  |=================================                                                 |  40%
| Let's first ask the question of where our NAs are located in our data. The is.na()
| function tells us whether each element of a vector is NA. Call is.na() on my_data and
| assign the result to my_na.

> is.na(my_data)
  [1]  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE
 [15]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE
 [29] FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE
 [43] FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE
 [57]  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE
 [71] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE
 [85] FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE
 [99]  TRUE FALSE

| Almost! Try again. Or, type info() for more options.

| Assign the result of is.na(my_data) to the variable my_na.

> my_na <- is.na(my_data)

| You're the best!

  |=====================================                                             |  45%
| Now, print my_na to see what you came up with.

> my_na
  [1]  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE
 [15]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE
 [29] FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE
 [43] FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE
 [57]  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE
 [71] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE
 [85] FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE
 [99]  TRUE FALSE

| You got it right!

  |=========================================                                         |  50%
| Everywhere you see a TRUE, you know the corresponding element of my_data is NA. Likewise,
| everywhere you see a FALSE, you know the corresponding element of my_data is one of our
| random draws from the standard normal distribution.

...

  |=============================================                                     |  55%
| In our previous discussion of logical operators, we introduced the `==` operator as a
| method of testing for equality between two objects. So, you might think the expression
| my_data == NA yields the same results as is.na(). Give it a try.

> my_data == NA
  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [30] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [59] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [88] NA NA NA NA NA NA NA NA NA NA NA NA NA

| You are doing so well!

  |=================================================                                 |  60%
| The reason you got a vector of all NAs is that NA is not really a value, but just a
| placeholder for a quantity that is not available. Therefore the logical expression is
| incomplete and R has no choice but to return a vector of the same length as my_data that
| contains all NAs.

...

  |=====================================================                             |  65%
| Don't worry if that's a little confusing. The key takeaway is to be cautious when using
| logical expressions anytime NAs might creep in, since a single NA value can derail the
| entire thing.

...

  |=========================================================                         |  70%
| So, back to the task at hand. Now that we have a vector, my_na, that has a TRUE for every
| NA and FALSE for every numeric value, we can compute the total number of NAs in our data.

...

  |==============================================================                    |  75%
| The trick is to recognize that underneath the surface, R represents TRUE as the number 1
| and FALSE as the number 0. Therefore, if we take the sum of a bunch of TRUEs and FALSEs,
| we get the total number of TRUEs.

...

  |==================================================================                |  80%
| Let's give that a try here. Call the sum() function on my_na to count the total number of
| TRUEs in my_na, and thus the total number of NAs in my_data. Don't assign the result to a
| new variable.

> ?sum
> sum(my_na)
[1] 51

| Perseverance, that's the answer.

  |======================================================================            |  85%
| Pretty cool, huh? Finally, let's take a look at the data to convince ourselves that
| everything 'adds up'. Print my_data to the console.

> my_data
  [1]          NA          NA  0.73025271          NA          NA  1.40691015          NA
  [8]          NA          NA  1.15941834  1.24442322 -0.54913637          NA          NA
 [15]          NA          NA          NA          NA          NA -2.01103691  0.25060683
 [22]  0.03402236 -1.69438449  0.10388731  0.56620049          NA          NA          NA
 [29]  1.23120833          NA  0.65072094 -1.01326999  0.26842842          NA          NA
 [36]          NA          NA  0.99864325  0.24704588  0.32583263  0.18319253          NA
 [43] -0.38934333          NA  0.32025354          NA -1.07028877 -0.46128786          NA
 [50] -0.75761894 -0.63212188          NA -0.11326981          NA          NA  0.20872097
 [57]          NA -0.29186054          NA  0.22871152          NA          NA  0.55668292
 [64]          NA -0.10208872 -0.47084872          NA -0.16736013 -1.47878318          NA
 [71] -0.19690067 -0.59973403 -0.60136589  0.28303875          NA          NA          NA
 [78]          NA          NA          NA -0.81796259 -0.56314108          NA  1.15366779
 [85]  0.55997062          NA  0.55789599  1.93186711          NA          NA  1.08158209
 [92]          NA          NA  0.22533993          NA -0.68124565          NA  1.05393460
 [99]          NA  0.41601748

| That's a job well done!

  |==========================================================================        |  90%
| Now that we've got NAs down pat, let's look at a second type of missing value -- NaN,
| which stands for 'not a number'. To generate NaN, try dividing (using a forward slash) 0
| by 0 now.

> 0/0
[1] NaN

| You're the best!

  |==============================================================================    |  95%
| Let's do one more, just for fun. In R, Inf stands for infinity. What happens if you
| subtract Inf from Inf?

> Inf - Inf
[1] NaN

| You are really on a roll!

  |==================================================================================| 100%
