| In this lesson, we'll see how to extract elements from a vector based on some conditions
| that we specify.

...

  |==                                                                                |   3%
| For example, we may only be interested in the first 20 elements of a vector, or only the
| elements that are not NA, or only those that are positive or correspond to a specific
| variable of interest. By the end of this lesson, you'll know how to handle each of these
| scenarios.

...    

  |====                                                                              |   5%
| I've created for you a vector called x that contains a random ordering of 20 numbers
| (from a standard normal distribution) and 20 NAs. Type x now to see what it looks like.

> x
 [1] -0.8733509         NA -0.6848366  0.6438259         NA -0.2435910  0.6546683         NA
 [9]         NA         NA -0.3585176         NA  1.5205635 -0.7846448 -0.7972193         NA
[17]         NA         NA -1.6114827         NA -0.1084684 -1.8618318 -0.1856333         NA
[25]  0.8265441         NA  0.9106189  1.1419975         NA         NA         NA         NA
[33]         NA         NA         NA  0.2773835         NA -0.2773499  0.7017785 -1.9206127

| Excellent job!

  |======                                                                            |   8%
| The way you tell R that you want to select some particular elements (i.e. a 'subset')
| from a vector is by placing an 'index vector' in square brackets immediately following
| the name of the vector.

...

  |========                                                                          |  10%
| For a simple example, try x[1:10] to view the first ten elements of x.

> x[1:10]
 [1] -0.8733509         NA -0.6848366  0.6438259         NA -0.2435910  0.6546683         NA
 [9]         NA         NA

| All that hard work is paying off!

  |===========                                                                       |  13%
| Index vectors come in four different flavors -- logical vectors, vectors of positive
| integers, vectors of negative integers, and vectors of character strings -- each of which
| we'll cover in this lesson.

...

  |=============                                                                     |  15%
| Let's start by indexing with logical vectors. One common scenario when working with
| real-world data is that we want to extract all elements of a vector that are not NA (i.e.
| missing data). Recall that is.na(x) yields a vector of logical values the same length as
| x, with TRUEs corresponding to NA values in x and FALSEs corresponding to non-NA values
| in x.

...

  |===============                                                                   |  18%
| What do you think x[is.na(x)] will give you?

1: A vector with no NAs
2: A vector of all NAs
3: A vector of length 0
4: A vector of TRUEs and FALSEs

Selection: 2

| Great job!

  |=================                                                                 |  21%
| Prove it to yourself by typing x[is.na(x)].

> x[is.na(x)]
 [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

| You nailed it! Good job!

  |===================                                                               |  23%
| Recall that `!` gives us the negation of a logical expression, so !is.na(x) can be read
| as 'is not NA'. Therefore, if we want to create a vector called y that contains all of
| the non-NA values from x, we can use y <- x[!is.na(x)]. Give it a try.

> x[!is.na(x)]
 [1] -0.8733509 -0.6848366  0.6438259 -0.2435910  0.6546683 -0.3585176  1.5205635 -0.7846448
 [9] -0.7972193 -1.6114827 -0.1084684 -1.8618318 -0.1856333  0.8265441  0.9106189  1.1419975
[17]  0.2773835 -0.2773499  0.7017785 -1.9206127

| Not quite, but you're learning! Try again. Or, type info() for more options.

| Type y <- x[!is.na(x)] to capture all non-missing values from x.

> y <- x[!is.na(x)]

| You got it right!

  |=====================                                                             |  26%
| Print y to the console.

> y
 [1] -0.8733509 -0.6848366  0.6438259 -0.2435910  0.6546683 -0.3585176  1.5205635 -0.7846448
 [9] -0.7972193 -1.6114827 -0.1084684 -1.8618318 -0.1856333  0.8265441  0.9106189  1.1419975
[17]  0.2773835 -0.2773499  0.7017785 -1.9206127

| Keep working like that and you'll get there!

  |=======================                                                           |  28%
| Now that we've isolated the non-missing values of x and put them in y, we can subset y as
| we please.

...

  |=========================                                                         |  31%
| Recall that the expression y > 0 will give us a vector of logical values the same length
| as y, with TRUEs corresponding to values of y that are greater than zero and FALSEs
| corresponding to values of y that are less than or equal to zero. What do you think y[y >
| 0] will give you?

1: A vector of TRUEs and FALSEs
2: A vector of all the negative elements of y
3: A vector of all the positive elements of y
4: A vector of length 0
5: A vector of all NAs

Selection: 1

| Not exactly. Give it another go.

| The logical expression y > 0 will give us TRUE for each element of y that is positive.
| Based on that, what do you think y[y > 0] will return?

1: A vector of all the negative elements of y
2: A vector of all the positive elements of y
3: A vector of TRUEs and FALSEs
4: A vector of all NAs
5: A vector of length 0

Selection: 2

| You're the best!

  |===========================                                                       |  33%
| Type y[y > 0] to see that we get all of the positive elements of y, which are also the
| positive elements of our original vector x.

> y[y>0]
[1] 0.6438259 0.6546683 1.5205635 0.8265441 0.9106189 1.1419975 0.2773835 0.7017785

| That's a job well done!

  |=============================                                                     |  36%
| You might wonder why we didn't just start with x[x > 0] to isolate the positive elements
| of x. Try that now to see why.

> x[x>0]
 [1]        NA 0.6438259        NA 0.6546683        NA        NA        NA        NA
 [9] 1.5205635        NA        NA        NA        NA        NA 0.8265441        NA
[17] 0.9106189 1.1419975        NA        NA        NA        NA        NA        NA
[25]        NA 0.2773835        NA 0.7017785

| You are doing so well!

  |================================                                                  |  38%
| Since NA is not a value, but rather a placeholder for an unknown quantity, the expression
| NA > 0 evaluates to NA. Hence we get a bunch of NAs mixed in with our positive numbers
| when we do this.

...

  |==================================                                                |  41%
| Combining our knowledge of logical operators with our new knowledge of subsetting, we
| could do this -- x[!is.na(x) & x > 0]. Try it out.

> x[!is.na(x) & x>0]
[1] 0.6438259 0.6546683 1.5205635 0.8265441 0.9106189 1.1419975 0.2773835 0.7017785

| You are amazing!

  |====================================                                              |  44%
| In this case, we request only values of x that are both non-missing AND greater than
| zero.

...

  |======================================                                            |  46%
| I've already shown you how to subset just the first ten values of x using x[1:10]. In
| this case, we're providing a vector of positive integers inside of the square brackets,
| which tells R to return only the elements of x numbered 1 through 10.

...

  |========================================                                          |  49%
| Many programming languages use what's called 'zero-based indexing', which means that the
| first element of a vector is considered element 0. R uses 'one-based indexing', which
| (you guessed it!) means the first element of a vector is considered element 1.

...

  |==========================================                                        |  51%
| Can you figure out how we'd subset the 3rd, 5th, and 7th elements of x? Hint -- Use the
| c() function to specify the element numbers as a numeric vector.

> ?c
> c(3, 5, 7)
[1] 3 5 7

| You're close...I can feel it! Try it again. Or, type info() for more options.

| Create a vector of indexes with c(3, 5, 7), then put that inside of the square brackets.

> c(3, 5, 7),
Error: unexpected ',' in "c(3, 5, 7),"
> c[3, 5, 7]
Error in c[3, 5, 7] : object of type 'builtin' is not subsettable
> [c(3, 5, 7)]
Error: unexpected '[' in "["
> info()

| When you are at the R prompt (>):
| -- Typing skip() allows you to skip the current question.
| -- Typing play() lets you experiment with R on your own; swirl will ignore what you do...
| -- UNTIL you type nxt() which will regain swirl's attention.
| -- Typing bye() causes swirl to exit. Your progress will be saved.
| -- Typing main() returns you to swirl's main menu.
| -- Typing info() displays these options again.

> play()

| Entering play mode. Experiment as you please, then type nxt() when you are ready to
| resume the lesson.

> x
 [1] -0.8733509         NA -0.6848366  0.6438259         NA -0.2435910  0.6546683         NA
 [9]         NA         NA -0.3585176         NA  1.5205635 -0.7846448 -0.7972193         NA
[17]         NA         NA -1.6114827         NA -0.1084684 -1.8618318 -0.1856333         NA
[25]  0.8265441         NA  0.9106189  1.1419975         NA         NA         NA         NA
[33]         NA         NA         NA  0.2773835         NA -0.2773499  0.7017785 -1.9206127
> c(x[3], x[5], x[7])
[1] -0.6848366         NA  0.6546683
> nxt()

| Resuming lesson...


| Can you figure out how we'd subset the 3rd, 5th, and 7th elements of x? Hint -- Use the
| c() function to specify the element numbers as a numeric vector.

> c(x[3], x[5], x[7])
[1] -0.6848366         NA  0.6546683

| Keep trying! Or, type info() for more options.

| Create a vector of indexes with c(3, 5, 7), then put that inside of the square brackets.

> [c(3, 5, 7)]
Error: unexpected '[' in "["
> [c(3, 5, 7),]
Error: unexpected '[' in "["
> c[(3, 5, 7),]
Error: unexpected ',' in "c[(3,"
> x[c(3, 5, 7)]
[1] -0.6848366         NA  0.6546683

| You got it!

  |============================================                                      |  54%
| It's important that when using integer vectors to subset our vector x, we stick with the
| set of indexes {1, 2, ..., 40} since x only has 40 elements. What happens if we ask for
| the zeroth element of x (i.e. x[0])? Give it a try.

> c(x[3], x[5], x[7])
[1] -0.6848366         NA  0.6546683

| Give it another try. Or, type info() for more options.

| Try x[0] to see what happens when we refer to the zeroth element of a vector, which is
| not defined in R.

> x[0]
numeric(0)

| That's correct!

  |==============================================                                    |  56%
| As you might expect, we get nothing useful. Unfortunately, R doesn't prevent us from
| doing this. What if we ask for the 3000th element of x? Try it out.

> x[3000]
[1] NA

| All that practice is paying off!

  |================================================                                  |  59%
| Again, nothing useful, but R doesn't prevent us from asking for it. This should be a
| cautionary tale. You should always make sure that what you are asking for is within the
| bounds of the vector you're working with.

...

  |==================================================                                |  62%
| What if we're interested in all elements of x EXCEPT the 2nd and 10th? It would be pretty
| tedious to construct a vector containing all numbers 1 through 40 EXCEPT 2 and 10.

...

  |=====================================================                             |  64%
| Luckily, R accepts negative integer indexes. Whereas x[c(2, 10)] gives us ONLY the 2nd
| and 10th elements of x, x[c(-2, -10)] gives us all elements of x EXCEPT for the 2nd and
| 10 elements.  Try x[c(-2, -10)] now to see this.

> x[c(-2, -10)]
 [1] -0.8733509 -0.6848366  0.6438259         NA -0.2435910  0.6546683         NA         NA
 [9] -0.3585176         NA  1.5205635 -0.7846448 -0.7972193         NA         NA         NA
[17] -1.6114827         NA -0.1084684 -1.8618318 -0.1856333         NA  0.8265441         NA
[25]  0.9106189  1.1419975         NA         NA         NA         NA         NA         NA
[33]         NA  0.2773835         NA -0.2773499  0.7017785 -1.9206127

| Perseverance, that's the answer.

  |=======================================================                           |  67%
| A shorthand way of specifying multiple negative numbers is to put the negative sign out
| in front of the vector of positive numbers. Type x[-c(2, 10)] to get the exact same
| result.

> x[c(-2, 10)]
Error in x[c(-2, 10)] : only 0's may be mixed with negative subscripts
> x[-c(2, 10)]
 [1] -0.8733509 -0.6848366  0.6438259         NA -0.2435910  0.6546683         NA         NA
 [9] -0.3585176         NA  1.5205635 -0.7846448 -0.7972193         NA         NA         NA
[17] -1.6114827         NA -0.1084684 -1.8618318 -0.1856333         NA  0.8265441         NA
[25]  0.9106189  1.1419975         NA         NA         NA         NA         NA         NA
[33]         NA  0.2773835         NA -0.2773499  0.7017785 -1.9206127

| Nice work!

  |=========================================================                         |  69%
| So far, we've covered three types of index vectors -- logical, positive integer, and
| negative integer. The only remaining type requires us to introduce the concept of 'named'
| elements.

...

  |===========================================================                       |  72%
| Create a numeric vector with three named elements using vect <- c(foo = 11, bar = 2, norf
| = NA).

> vect <- c(foo=11, bar=2, norf=NA)

| You are doing so well!

  |=============================================================                     |  74%
| When we print vect to the console, you'll see that each element has a name. Try it out.

> vect
 foo  bar norf 
  11    2   NA 

| Great job!

  |===============================================================                   |  77%
| We can also get the names of vect by passing vect as an argument to the names() function.
| Give that a try.

> names("foo", "bar", "norf")
Error in names("foo", "bar", "norf") : 
  3 arguments passed to 'names' which requires 1
> names(vect)
[1] "foo"  "bar"  "norf"

| All that hard work is paying off!

  |=================================================================                 |  79%
| Alternatively, we can create an unnamed vector vect2 with c(11, 2, NA). Do that now.

> vect2 <- c(11,2, NA)

| Excellent job!

  |===================================================================               |  82%
| Then, we can add the `names` attribute to vect2 after the fact with names(vect2) <-
| c("foo", "bar", "norf"). Go ahead.

> names(vect2) <- c("foo", "bar", "norf")

| Great job!

  |=====================================================================             |  85%
| Now, let's check that vect and vect2 are the same by passing them as arguments to the
| identical() function.

> 
> identical(vect, vect2)
[1] TRUE

| You nailed it! Good job!

  |=======================================================================           |  87%
| Indeed, vect and vect2 are identical named vectors.

...

  |==========================================================================        |  90%
| Now, back to the matter of subsetting a vector by named elements. Which of the following
| commands do you think would give us the second element of vect?

1: vect[bar]
2: vect["bar"]
3: vect["2"]

Selection: 2

| You are really on a roll!

  |============================================================================      |  92%
| Now, try it out.

> vect["bar"]
bar 
  2 

| You're the best!

  |==============================================================================    |  95%
| Likewise, we can specify a vector of names with vect[c("foo", "bar")]. Try it out.

> vect[c("foo", "bar")]
foo bar 
 11   2 

| All that practice is paying off!

  |================================================================================  |  97%
| Now you know all four methods of subsetting data from vectors. Different approaches are
| best in different scenarios and when in doubt, try it out!

...

  |==================================================================================| 100%
